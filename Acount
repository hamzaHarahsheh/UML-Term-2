using System;
using System.Runtime.Serialization.Formatters.Binary;

namespace OnlineShopping {
  [Serializable]
  class Address {
    string street, city, postalCode, country;

    public Address(string street, string city, string postalCode, string country) {
      this.street = street;
      this.city = city;
      this.country = country;
      this.postalCode = postalCode;
    }

    public string Street {
      set => street = value;
      get => street;
    }

    public string City {
      set => city = value;
      get => city;
    }

    public string PostalCode {
      set => postalCode = value;
      get => postalCode;
    }

    public string Country {
      set => country = value;
      get => country;
    }
  }

  [Serializable]
  class Account {
    string email, phoneNumber, password, accountType;
    Address address;
    public Account(string email, string phoneNumber, string password, string accountType, string street, string city, string postalCode, string country) {
      this.email = email;
      this.phoneNumber = phoneNumber;
      this.password = password;
      this.accountType = accountType;
      this.address = new Address(street, city, postalCode, country);
    }

    public string Email {
      set => email = value;
      get => email;
    }

    public string PhoneNumber {
      set => phoneNumber = value;
      get => phoneNumber;
    }

    public string Password {
      set => password = value;
      get => password;
    }

    public string AccountType {
      // set should not be accessed
      get => accountType;
    }

    public Address Address {
      set => address = value;
      get => address;
    }
  }

  [Serializable]
  class Person {
    string name;
    public Person(string name) {
      this.name = name;
    }

    public string Name {
      set => name = value;
      get => name;
    }
  }

  [Serializable]
  class Seller : Person {
    string storeName;
    List<Listing> Listings = new List<Listing>();
    Dictionary<Buyer, List<Listing>> sold = new Dictionary<Buyer, List<Listing>> ();
    Account myAccount;

    public Seller(string storeName, string name, string email, string phoneNumber, string password, string accountType, string street, string city, string postalCode, string country) : base(name) {
      this.storeName = storeName;
      myAccount = new Account(email, phoneNumber, password, accountType, street, city, postalCode, country);
    }

    public Listing CreateListing() {
      Console.WriteLine("#Enter listing info : name, description,  id, price, number of items");
      string name = Console.ReadLine();
      string description = Console.ReadLine();
      string id = Console.ReadLine();
      double price = Convert.ToDouble(Console.ReadLine());
      int numberOfItems = Convert.ToInt32(Console.ReadLine());
      Listing temp = new Listing(name, description, id, numberOfItems, price, this);
      return temp;
    }

    int searchForListing(Listing x) {
      for (int i = 0; i < Listings.Count; i++) {
        if (x == Listings[i]) {
          return i;
        }
      }
      return -1;
    }

    public void AddListing(Catalog cat) {
      Listing x = CreateListing();
      Listings.Add(x);
      cat.AddListing(x);
    }

    public void RemoveListing(Catalog cat) {
      Listing x = CreateListing();
      if (searchForListing(x) != -1) {
        Listings.Remove(x);
        cat.RemoveListing(x);
      }
    }

    public void UpdateListingInfo(Catalog cat) {
      Listing x = CreateListing();
      int index = searchForListing(x);
      if (index < 0) {
        Console.WriteLine("Listing Not Found");
        return;
      }
      while (true) {
        Console.WriteLine("Please enter what to update");
        Interface.choiceScreen(new string[] {"Name", "Description", "Number Of Items", "Price", "Exit"});
        int choice = -1;
        Interface.getChoice(1, 5);
        if (choice == 5)  {
          break;
        }
        Console.WriteLine("Enter new Data");
        string? data = Console.ReadLine();
        switch(choice) {
          case 1:
            Listings[index].Name = data!;
            break;
          case 2:
            Listings[index].Description = data!;
            break;
          case 3:
            Listings[index].NumberOfItems = Convert.ToInt32(data);
            break;
          case 4:
            Listings[index].Price = Convert.ToInt32(data);
            break;
        }
      }
    }

    public void UpdateAccountInfo(Catalog cat) {
      while (true) {
        Console.WriteLine("Please enter what to update");
        Interface.choiceScreen(new string[] {"Name", "Email", "Phone Numbre", "Store Name", "Password", "Exit"});
        int choice = -1;
        Interface.getChoice(1, 6);
        if (choice == 6)  {
          break;
        }
        Console.WriteLine("Enter new Data");
        string? data = Console.ReadLine();
        switch(choice) {
          case 1:
            this.Name = data!;
            break;
          case 2:
            this.MyAccount.Email = data!;
            break;
          case 3:
            this.MyAccount.PhoneNumber = data!;
            break;
          case 4:
            this.StoreName = data!;
            break;
          case 5:
            this.MyAccount.Password = data!;
            break; 
        }
      }
      // TODO: SAVE CHANGES
    }

    public void ViewSellerListings() {
      for (int i = 0; i < Listings.Count; i++) {
        Console.WriteLine((i + 1).ToString() + "." + Listings[i].Name + " $" + Listings[i].Price.ToString());
      }
    }

    public void ViewAllListing(Catalog cat) {
      cat.ViewCatalog();
    }

    public string StoreName {
      set => storeName = value;
      get => storeName;
    } 
    
    public Account MyAccount {
      set => myAccount = value;
      get => myAccount;
    }
  }

  [Serializable]
  class Buyer : Person {
    int id;
    Account myAccount;
    Payment paymentInfo;
    Cart myCart;
    static int cnt = 0;
    public Buyer(string name, string email, string phoneNumber, string password, string accountType, string street, string city, string postalCode, string country, string cardNumber, string pinCode) : base(name) {
      this.id = ++cnt;
      myAccount = new Account(email, phoneNumber, password, accountType, street, city, postalCode, country);
      myCart = new Cart(id);
      paymentInfo = new Payment(cardNumber, pinCode, street, city, postalCode, country);
    }
    // just like a black box we call a cart functions
    public void AddToCart(Listing x) {
      myCart.AddToCart(x);
    }

    public void RemoveFromCart(Listing x) {
      myCart.RemoveFromCart(x);
    }

    public void ViewMyCart() {
      myCart.ViewCartInfo();
    }

    public void ViewAllListing(Catalog cat) {
      cat.ViewCatalog();
    }
    
    public void ViewChoosenListing() {
    }

    public void UpdateAccountInfo(Catalog cat) {
      while (true) {
        Console.WriteLine("Please enter what to update");
        Interface.choiceScreen(new string[] {"Name", "Email", "Phone Numbre", "Password", "Exit"});
        int choice = -1;
        Interface.getChoice(1, 5);
        if (choice == 5)  {
          break;
        }
        Console.WriteLine("Enter new Data");
        string? data = Console.ReadLine();
        switch(choice) {
          case 1:
            this.Name = data!;
            break;
          case 2:
            this.MyAccount.Email = data!;
            break;
          case 3:
            this.MyAccount.PhoneNumber = data!;
            break;
          case 4:
            this.MyAccount.Password = data!;
            break; 
        }
      }
      //TODO SAVE CHANGES
    }

    public int Id {
      set => id = value;
      get => id;
    }

    public Account MyAccount {
      set => myAccount = value;
      get => myAccount;
    }

    public Payment PaymentInfo {
      set => paymentInfo = value;
      get => paymentInfo;
    }

    public Cart MyCart {
      set => myCart = value;
      get => myCart;
    }
  }
}
